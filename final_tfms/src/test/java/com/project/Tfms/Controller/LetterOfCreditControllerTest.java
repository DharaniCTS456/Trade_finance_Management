package com.project.Tfms.Controller;

import com.project.tfms.controller.*;
import com.project.tfms.model.Customer;
import com.project.tfms.model.LetterOfCredit;
import com.project.tfms.model.LetterOfCredit.LCStatus;
import com.project.tfms.service.LetterOfCreditService;
import jakarta.servlet.http.HttpSession;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ui.Model;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class LetterOfCreditControllerTest {

    @Mock
    private LetterOfCreditService lcService;

    @Mock
    private Model model;

    @Mock
    private HttpSession session;

    @Mock
    private RedirectAttributes redirectAttributes;

    @InjectMocks
    private LetterOfCreditController letterOfCreditController;

    private Customer loggedInCustomer;
    private LetterOfCredit sampleLc;

    // --- DATE_FORMATTER DECLARATION ADDED HERE ---
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE;
    // If your date format is "dd-MM-yyyy", use:
    // private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    // ---------------------------------------------

    @BeforeEach
    void setUp() {
        loggedInCustomer = new Customer();
        loggedInCustomer.setCustomerId(1L);
        loggedInCustomer.setName("Test Customer");
        loggedInCustomer.setEmail("customer@example.com");

        sampleLc = new LetterOfCredit();
        sampleLc.setLcId(100L);
        sampleLc.setApplicantName("Test Customer");
        sampleLc.setAmount(10000.0);
        sampleLc.setStatus(LCStatus.PENDING);
        sampleLc.setCustomer(loggedInCustomer);
        // Initialize desiredValidityPeriod with a formatted date string
        sampleLc.setDesiredValidityPeriod(LocalDate.now().plusMonths(3).format(DATE_FORMATTER));
    }

    // --- CUSTOMER-FACING ENDPOINTS ---

    @Test
    void showCreateLcForm_loggedInCustomer_returnsCreateLcForm() {
        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);

        String viewName = letterOfCreditController.showCreateLcForm(model, session);

        assertEquals("lc/create", viewName);
        verify(model).addAttribute(eq("letterOfCredit"), any(LetterOfCredit.class));
        verify(session).getAttribute("loggedInCustomer");
    }

    @Test
    void createLetterOfCredit_success_addsSuccessMessageAndClearsForm() {
        // Prepare a returned LC object to simulate the service's return value
        LetterOfCredit createdLc = new LetterOfCredit();
        createdLc.setLcId(1L); // Assume an ID is generated by the service
        createdLc.setCustomer(loggedInCustomer);
        createdLc.setStatus(LCStatus.PENDING); // Initial status for new LC
        createdLc.setAmount(sampleLc.getAmount());
        createdLc.setDesiredValidityPeriod(sampleLc.getDesiredValidityPeriod());

        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        // FIX: Use when().thenReturn() for a method that returns a value
        when(lcService.createLetterOfCredit(any(LetterOfCredit.class))).thenReturn(createdLc);

        String viewName = letterOfCreditController.createLetterOfCredit(sampleLc, session, model);

        assertEquals("lc/create", viewName);
        verify(lcService).createLetterOfCredit(any(LetterOfCredit.class));
        verify(model).addAttribute(eq("successMessage"), anyString());
        verify(model).addAttribute(eq("letterOfCredit"), any(LetterOfCredit.class)); // Verifies form clear
    }

    @Test
    void getLcDetails_loggedInAndAuthorized_returnsDetailsPage() {
        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        when(lcService.getLetterOfCreditById(sampleLc.getLcId())).thenReturn(sampleLc);

        String viewName = letterOfCreditController.getLcDetails(sampleLc.getLcId(), model, session);

        assertEquals("lc/details", viewName);
        verify(lcService).getLetterOfCreditById(sampleLc.getLcId());
        verify(model).addAttribute("letterOfCredit", sampleLc);
    }

    @Test
    void showAmendLcForm_loggedInAndAuthorizedAndAmendableStatus_returnsAmendForm() {
        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        when(lcService.getLetterOfCreditById(sampleLc.getLcId())).thenReturn(sampleLc); // Status is PENDING

        String viewName = letterOfCreditController.showAmendLcForm(sampleLc.getLcId(), model, session);

        assertEquals("lc/amend", viewName);
        verify(model).addAttribute("letterOfCredit", sampleLc);
    }

    @Test
    void amendLetterOfCredit_successWithPendingStatus_updatesLcAndRedirectsToDetails() {
        LetterOfCredit updatedLc = new LetterOfCredit();
        updatedLc.setLcId(sampleLc.getLcId());
        updatedLc.setAmount(12000.0);
        updatedLc.setDesiredValidityPeriod(LocalDate.of(2026, 6, 1).format(DATE_FORMATTER));
        updatedLc.setCustomer(loggedInCustomer); // Ensure customer is set for authorization check

        // Prepare the LC object that the service will return after amendment
        LetterOfCredit returnedAmendedLc = new LetterOfCredit();
        returnedAmendedLc.setLcId(sampleLc.getLcId());
        returnedAmendedLc.setAmount(updatedLc.getAmount());
        returnedAmendedLc.setDesiredValidityPeriod(updatedLc.getDesiredValidityPeriod());
        returnedAmendedLc.setStatus(LCStatus.PENDING); // Assuming it stays PENDING or becomes PENDING_AMENDMENT
        returnedAmendedLc.setCustomer(loggedInCustomer);

        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        when(lcService.getLetterOfCreditById(sampleLc.getLcId())).thenReturn(sampleLc); // Original status is PENDING
        // FIX: Use when().thenReturn() for a method that returns a value
        when(lcService.amendLetterOfCredit(eq(sampleLc.getLcId()), any(LetterOfCredit.class))).thenReturn(returnedAmendedLc);

        String viewName = letterOfCreditController.amendLetterOfCredit(sampleLc.getLcId(), updatedLc, session, model, redirectAttributes);

        assertEquals("redirect:/lc/details/" + sampleLc.getLcId(), viewName);
        verify(lcService).amendLetterOfCredit(eq(sampleLc.getLcId()), any(LetterOfCredit.class));
        verify(redirectAttributes).addFlashAttribute(eq("successMessage"), anyString());
    }

    @Test
    void closeLetterOfCredit_success_redirectsToMyLcsWithSuccess() {
        sampleLc.setStatus(LCStatus.ISSUED); // Example status that can be closed

        // Prepare the LC object that the service will return after closing
        LetterOfCredit closedLc = new LetterOfCredit();
        closedLc.setLcId(sampleLc.getLcId());
        closedLc.setCustomer(loggedInCustomer); // Important for authorization checks
        closedLc.setStatus(LCStatus.CLOSED);

        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        when(lcService.getLetterOfCreditById(sampleLc.getLcId())).thenReturn(sampleLc);
        // FIX: Use when().thenReturn() for a method that returns a value
        when(lcService.closeLetterOfCredit(sampleLc.getLcId())).thenReturn(closedLc);

        String viewName = letterOfCreditController.closeLetterOfCredit(sampleLc.getLcId(), session, model, redirectAttributes);

        assertEquals("redirect:/lc/my-lcs", viewName);
        verify(lcService).closeLetterOfCredit(sampleLc.getLcId());
        verify(redirectAttributes).addFlashAttribute(eq("successMessage"), anyString());
    }

    @Test
    void getMyLettersOfCredit_loggedIn_returnsMyLcsPage() {
        List<LetterOfCredit> lcs = Arrays.asList(sampleLc, new LetterOfCredit());
        when(session.getAttribute("loggedInCustomer")).thenReturn(loggedInCustomer);
        when(lcService.getLettersOfCreditByCustomerId(loggedInCustomer.getCustomerId())).thenReturn(lcs);

        String viewName = letterOfCreditController.getMyLettersOfCredit(model, session);

        assertEquals("lc/my-lcs", viewName);
        verify(lcService).getLettersOfCreditByCustomerId(loggedInCustomer.getCustomerId());
        verify(model).addAttribute("lcs", lcs);
    }

    // --- ADMIN-FACING ENDPOINTS ---

    @Test
    void getAllLettersOfCreditForAdmin_loggedInAsAdmin_returnsAdminListPage() {
        List<LetterOfCredit> allLcs = Arrays.asList(sampleLc, new LetterOfCredit());
        when(session.getAttribute("loggedInAdmin")).thenReturn(new Object()); // Simulate admin logged in
        when(lcService.getAllLettersOfCredit()).thenReturn(allLcs);

        String viewName = letterOfCreditController.getAllLettersOfCreditForAdmin(model, session);

        assertEquals("lc/alist", viewName);
        verify(lcService).getAllLettersOfCredit();
        verify(model).addAttribute("lcs", allLcs);
    }

    @Test
    void amendLetterOfCreditByAdmin_success_updatesLcAndRedirectsToDetails() {
        LetterOfCredit adminUpdatedLc = new LetterOfCredit();
        adminUpdatedLc.setLcId(sampleLc.getLcId());
        adminUpdatedLc.setAmount(20000.0);
        adminUpdatedLc.setIssueDate(LocalDate.now());
        adminUpdatedLc.setExpiryDate(LocalDate.now().plusMonths(6));
        adminUpdatedLc.setStatus(LCStatus.ISSUED); // Admin can change status directly
        adminUpdatedLc.setDesiredValidityPeriod(LocalDate.of(2026, 6, 1).format(DATE_FORMATTER)); // Ensure this is set

        // Prepare the LC object that the service will return after admin amendment
        LetterOfCredit returnedAdminAmendedLc = new LetterOfCredit();
        returnedAdminAmendedLc.setLcId(sampleLc.getLcId());
        returnedAdminAmendedLc.setAmount(adminUpdatedLc.getAmount());
        returnedAdminAmendedLc.setIssueDate(adminUpdatedLc.getIssueDate());
        returnedAdminAmendedLc.setExpiryDate(adminUpdatedLc.getExpiryDate());
        returnedAdminAmendedLc.setStatus(adminUpdatedLc.getStatus());
        returnedAdminAmendedLc.setDesiredValidityPeriod(adminUpdatedLc.getDesiredValidityPeriod());
        returnedAdminAmendedLc.setCustomer(sampleLc.getCustomer()); // Maintain original customer

        when(session.getAttribute("loggedInAdmin")).thenReturn(new Object());
        when(lcService.getLetterOfCreditById(sampleLc.getLcId())).thenReturn(sampleLc);
        // FIX: Use when().thenReturn() for a method that returns a value
        when(lcService.amendLetterOfCredit(eq(sampleLc.getLcId()), any(LetterOfCredit.class))).thenReturn(returnedAdminAmendedLc);

        String viewName = letterOfCreditController.amendLetterOfCreditByAdmin(sampleLc.getLcId(), adminUpdatedLc, model, redirectAttributes, session);

        assertEquals("redirect:/lc/admin/details/" + sampleLc.getLcId(), viewName);
        verify(lcService).amendLetterOfCredit(eq(sampleLc.getLcId()), argThat(lc ->
            lc.getAmount().equals(20000.0) &&
            lc.getStatus() == LCStatus.ISSUED &&
            lc.getIssueDate() != null &&
            lc.getExpiryDate() != null
        ));
        verify(redirectAttributes).addFlashAttribute(eq("successMessage"), anyString());
    }

    @Test
    void approveLcByAdmin_success_updatesStatusAndRedirectsToPendingReview() {
        // Prepare the LC object that the service will return after approval
        LetterOfCredit approvedLc = new LetterOfCredit();
        approvedLc.setLcId(sampleLc.getLcId());
        approvedLc.setStatus(LCStatus.ISSUED); // Expected status after approval
        approvedLc.setCustomer(loggedInCustomer);

        when(session.getAttribute("loggedInAdmin")).thenReturn(new Object());
        // FIX: Use when().thenReturn() for a method that returns a value
        when(lcService.updateLcStatus(sampleLc.getLcId(), LCStatus.ISSUED)).thenReturn(approvedLc);

        String viewName = letterOfCreditController.approveLcByAdmin(sampleLc.getLcId(), redirectAttributes, session);

        assertEquals("redirect:/lc/admin/pending-review", viewName);
        verify(lcService).updateLcStatus(sampleLc.getLcId(), LCStatus.ISSUED);
        verify(redirectAttributes).addFlashAttribute(eq("successMessage"), anyString());
    }
}